rule php_malware_dna_optimized
{
    meta:
        description = "Optimized PHP Malware DNA Detection - Reduced False Positives"
        author = "php_obfuscation"
        version = "1.0"
        reference = "Enhanced LLM"

    strings:
        // High-confidence execution sinks
        $exec_sink_1 = /\b(eval|assert|system|exec|shell_exec|passthru|popen|proc_open|pcntl_exec)\s*\(/ nocase
        $exec_sink_2 = /preg_replace\s*\([^,]+,\s*['"][^'"]*e[^'"]*['"]/ nocase
        $exec_sink_3 = "create_function"
        
        // User input sources
        $input_source_1 = "$_POST"
        $input_source_2 = "$_GET" 
        $input_source_3 = "$_COOKIE"
        $input_source_4 = "$_REQUEST"
        $input_source_5 = "$_FILES"
        $input_source_6 = "php://input"
        
        // Obfuscation functions with context awareness
        $obfu_base64 = /base64_decode\s*\(\s*\$[a-zA-Z_][a-zA-Z0-9_]*/ nocase
        $obfu_compress = /(gzuncompress|gzinflate|gzdecode)\s*\(\s*\$/ nocase
        $obfu_rot13 = /str_rot13\s*\(\s*\$/ nocase
        $obfu_strrev_suspicious = /strrev\s*\(\s*base64_decode|strrev\s*\(\s*\$[a-zA-Z_][a-zA-Z0-9_]*\s*\.\s*\$/ nocase
        
        // Suspicious network activity - more precise patterns
        $net_fetch_external = /(file_get_contents|curl_exec|fopen|readfile)\s*\(\s*["'](https?|ftp):\/\/([a-z0-9\.-]+\.[a-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3})[^'"]*['"]/ nocase
        $net_socket = /(fsockopen|pfsockopen)\s*\(\s*["']([a-z0-9\.-]+\.[a-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3})['"]/ nocase
        
        // Reverse shell patterns - more specific to avoid hash function FPs
        $rev_shell_cmd = /\b(nc|netcat|bash|sh|cmd)\s+[^;\n]*?\s+([a-z0-9\.-]+\.[a-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3})\s+[0-9]{1,5}/ nocase
        $rev_shell_socket = /socket_create\s*\(.*?socket_connect.*?([a-z0-9\.-]+\.[a-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3})/s nocase
        
        // Webshell keywords
        $keyword_uname = /system\s*\(\s*["']uname\s+-a["']/ nocase
        $keyword_whoami = /\b(system|exec|shell_exec)\s*\(\s*["']whoami["']/ nocase
        $keyword_shell_c99 = "c99shell" nocase
        $keyword_shell_r57 = "r57shell" nocase
        $keyword_cmd_exec = /\$_(GET|POST|REQUEST)\s*\[[^\]]*\]\s*.*?\b(system|exec|eval|shell_exec)/ nocase
        
        // File operation patterns indicating backdoor behavior
        $file_write_backdoor = /file_put_contents\s*\(\s*[^,]+,\s*\$_(GET|POST|REQUEST)\[/ nocase
        $file_include_remote = /(include|require)(_once)?\s*\(\s*["'](https?|ftp):/ nocase
        
        // Dynamic function execution patterns
        $dynamic_func_1 = /\$[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*["'][a-z_]+["']\s*;\s*\$[a-zA-Z_][a-zA-Z0-9_]*\s*\(/ nocase
        $dynamic_func_2 = /\$[a-zA-Z_][a-zA-Z0-9_]*\s*\(\s*\$_(GET|POST|REQUEST)\[/ nocase
        
        // Authentication bypass patterns
        $auth_bypass_1 = /@\$_SESSION\s*\[['"][^'"]*['"]\]\s*=\s*["']/ nocase
        $auth_bypass_2 = /if\s*\(\s*\$_(GET|POST)\[['"][^'"]*['"]\]\s*==\s*['"][^'"]*['"]\s*\)/ nocase

    condition:
        filesize < 5MB and
        (
            // High-confidence malicious patterns
            (any of ($input_source_*) and any of ($exec_sink_*)) or
            
            // Obfuscated execution
            (2 of ($obfu_*) and any of ($exec_sink_*)) or
            
            // Network-based attacks
            (any of ($net_*) and any of ($exec_sink_*)) or
            
            // Direct webshell indicators
            2 of ($keyword_*) or
            
            // Backdoor file operations
            any of ($file_*) or
            
            // Dynamic function execution from user input
            any of ($dynamic_func_*) or
            
            // Authentication bypass attempts
            any of ($auth_bypass_*) or
            
            // Multiple obfuscation techniques
            3 of ($obfu_*) or
            
            // Reverse shell specific patterns
            any of ($rev_shell_*)
        )
}

rule php_advanced_persistence_detection
{
    meta:
        description = "Enhanced PHP backdoor persistence and evasion detection"
        author = "php_obfuscation" 
        version = "2.0"

    strings:
        // Variable function obfuscation with higher specificity
        $obfu_var_func = /\$[a-zA-Z_][a-zA-Z0-9_]{1,15}\s*=\s*["'][a-z_]+["']\s*;\s*\$[a-zA-Z_][a-zA-Z0-9_]{1,15}\s*\(.*?\$_(GET|POST|REQUEST)/s nocase
        
        // String concatenation obfuscation
        $obfu_concat_exec = /["'][a-z]{1,4}["']\s*\.\s*["'][a-z]{1,4}["']\s*.*?\b(eval|exec|system)/s nocase
        
        // Character-based obfuscation
        $obfu_chr_build = /\b(chr|ord)\s*\(.*?\)\s*\.\s*\b(chr|ord)\s*\(/s nocase
        
        // Persistent backdoor installation
        $persist_hidden_file = /file_put_contents\s*\(\s*["']\.[a-zA-Z0-9_\/-]+\.php["']/s nocase
        $persist_htaccess = /file_put_contents\s*\(\s*["']\.htaccess["'].*?(php_value|auto_prepend_file|auto_append_file)/s nocase
        $persist_config_inject = /file_put_contents\s*\(\s*["'][^"']*\.(php|inc)["'].*?\$_(POST|GET)\[/s nocase
        
        // Stealth techniques
        $stealth_disable_funcs = /ini_set\s*\(\s*["'](disable_functions|safe_mode)["']/s nocase
        $stealth_error_suppress = /@\s*(file_get_contents|include|require|fopen)\s*\(/s nocase
        $stealth_output_buffer = /ob_start\s*\(\s*["']ob_gzhandler["']\s*\)\s*;.*?eval/s nocase
        
        // Memory-only execution
        $memory_exec_1 = /eval\s*\(\s*gzinflate\s*\(\s*base64_decode/s nocase
        $memory_exec_2 = /assert\s*\(\s*str_rot13\s*\(/s nocase
        
        // Anti-analysis techniques  
        $anti_debug_1 = /if\s*\(\s*(isset\s*\(\s*\$_SERVER\[["']HTTP_USER_AGENT["']\]\)|strpos.*?bot|crawler)/s nocase
        $anti_debug_2 = /exit\s*\(\s*\)\s*;.*?if.*?\$_SERVER\[["']REQUEST_METHOD["']\]/s nocase

    condition:
        filesize < 3MB and
        (
            // High-confidence obfuscated execution
            ($obfu_var_func and (base64_decode or str_rot13)) or
            
            // Complex obfuscation chains
            ($obfu_concat_exec or $obfu_chr_build) or
            
            // Persistence mechanisms
            any of ($persist_*) or
            
            // Stealth and evasion
            2 of ($stealth_*) or
            
            // Memory-based execution
            any of ($memory_exec_*) or
            
            // Anti-analysis features
            any of ($anti_debug_*)
        )
}

rule php_webshell_detection
{
    meta:
        description = "Specific webshell and backdoor detection patterns"
        author = "php_obfuscation"
        version = "3.0"

    strings:
        // Classic webshell signatures
        $webshell_eval_post = /eval\s*\(\s*\$_(POST|GET|REQUEST)\[/s nocase
        $webshell_assert_input = /assert\s*\(\s*\$_(POST|GET|REQUEST)\[/s nocase
        $webshell_system_input = /(system|exec|shell_exec|passthru)\s*\(\s*\$_(POST|GET|REQUEST)\[/s nocase
        
        // File management webshells
        $webshell_file_ops = /(fwrite|file_put_contents|fopen).*?\$_(POST|GET|REQUEST)\[.*?file/s nocase
        $webshell_upload = /move_uploaded_file\s*\(\s*\$_FILES.*?\$_(POST|GET|REQUEST)/s nocase
        
        // Database webshells
        $webshell_sql_inject = /mysql_query\s*\(\s*\$_(POST|GET|REQUEST)\[/s nocase
        $webshell_mysqli_exec = /mysqli_query\s*\(.*?\$_(POST|GET|REQUEST)\[/s nocase
        
        // Information gathering
        $webshell_info_gather = /(phpinfo|system|exec)\s*\(\s*["']?(uname|whoami|id|pwd)["']?\s*\)/s nocase
        $webshell_dir_listing = /scandir\s*\(\s*\$_(POST|GET|REQUEST)\[|opendir\s*\(\s*\$_(POST|GET|REQUEST)\[/s nocase
        
        // Communication backdoors
        $webshell_reverse_shell = /fsockopen\s*\(\s*\$_(POST|GET|REQUEST)\[.*?[\d\.]+/s nocase
        $webshell_bind_shell = /socket_bind\s*\(.*?socket_listen\s*\(/s nocase

    condition:
        filesize < 2MB and
        (
            // Direct execution webshells
            any of ($webshell_eval_post, $webshell_assert_input, $webshell_system_input) or
            
            // File operation webshells  
            any of ($webshell_file_ops, $webshell_upload) or
            
            // Database interaction webshells
            any of ($webshell_sql_inject, $webshell_mysqli_exec) or
            
            // Information gathering capabilities
            $webshell_info_gather or
            
            // Directory traversal/listing
            $webshell_dir_listing or
            
            // Network communication backdoors
            any of ($webshell_reverse_shell, $webshell_bind_shell)
        )
}